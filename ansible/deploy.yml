---
- name: Deploy Docker container on EC2
  hosts: ec2
  become: yes

  vars:
    IMAGE: "rahul0315/devops-nodejs-app:{{ GIT_COMMIT | default('latest') }}"
    CONTAINER_NAME: devops-app
    APP_PORT: 3000

  tasks:

    - name: Check if Docker is already installed
      shell: docker --version
      register: docker_installed
      ignore_errors: yes

    - name: Install dependencies for Docker (only if not installed)
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes
      when: docker_installed.rc != 0

    - name: Create directory for Docker GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: docker_installed.rc != 0

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg
      when: docker_installed.rc != 0

    - name: Add Docker repository (force jammy for noble)
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable"
        state: present
        filename: docker
      when: docker_installed.rc != 0

    - name: Update APT after adding Docker repo
      apt:
        update_cache: yes
        force_apt_get: yes
      when: docker_installed.rc != 0

    - name: Install Docker engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
      when: docker_installed.rc != 0

    - name: Ensure Docker service is started
      service:
        name: docker
        state: started
        enabled: yes

    - name: Remove existing container if it exists
      shell: docker rm -f {{ CONTAINER_NAME }} || true

    - name: Pull latest image from Docker Hub
      shell: docker pull {{ IMAGE }}

    - name: Run container with port mapping 80:3000
      shell: docker run -d --name {{ CONTAINER_NAME }} -p 80:{{ APP_PORT }} {{ IMAGE }}
