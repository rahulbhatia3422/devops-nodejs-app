---
- name: Deploy Docker container on EC2
  hosts: ec2
  become: yes

  vars:
    IMAGE: "rahul0315/devops-nodejs-app:{{ GIT_COMMIT | default('latest') }}"
    CONTAINER_NAME: "devops-app"
    APP_PORT: 3000

  tasks:
    # ===== ENSURE CLEAN SLATE ===== #
    - name: Check for existing Docker installation
      command: docker --version
      register: docker_check
      ignore_errors: yes
      changed_when: false

    - name: Full Docker cleanup (if detected)
      block:
        - name: Stop all running containers
          shell: |
            docker stop $(docker ps -aq) || true
            docker rm $(docker ps -aq) || true
          ignore_errors: yes

        - name: Purge Docker packages
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
              - docker.io
            state: absent
            purge: yes
            autoremove: yes
          ignore_errors: yes

        - name: Remove residual configs
          find:
            paths:
              - /etc/apt/sources.list.d
              - /etc/apt/keyrings
            patterns: "docker*"
          register: docker_configs

        - name: Delete found config files
          file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ docker_configs.files }}"
          ignore_errors: yes

        - name: Clean Docker directories
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /var/lib/docker
            - /var/lib/containerd
          ignore_errors: yes
      when: docker_check.rc == 0

    # ===== DOCKER INSTALLATION ===== #
    - name: Update package index
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install prerequisites
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: latest

    - name: Setup Docker GPG key
      block:
        - name: Ensure keyring directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Download and install key
          shell: |
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
            gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
            chmod a+r /etc/apt/keyrings/docker.gpg
          args:
            creates: /etc/apt/keyrings/docker.gpg

    - name: Configure Docker repository
      copy:
        dest: /etc/apt/sources.list.d/docker.list
        content: |
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] \
          https://download.docker.com/linux/ubuntu \
          {{ ansible_distribution_release }} stable
        mode: '0644'
        validate: 'grep -q "signed-by" %s'

    - name: Install Docker components
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: yes
        install_recommends: no

    - name: Configure Docker daemon
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            }
          }
        mode: '0644'

    - name: Ensure Docker is running
      systemd:
        name: docker
        state: started
        enabled: yes
        daemon_reload: yes

    # ===== APPLICATION DEPLOYMENT ===== #
    - name: Pull application image
      docker_image:
        name: "{{ IMAGE }}"
        source: pull
      register: image_pull
      retries: 3
      delay: 5
      until: image_pull is success
      ignore_errors: yes

    - name: Fallback to latest image
      docker_image:
        name: "rahul0315/devops-nodejs-app:latest"
        source: pull
      when: image_pull is failed
      register: fallback_pull

    - name: Set final image name
      set_fact:
        IMAGE: >-
          {% if image_pull is failed and fallback_pull is success %}
          rahul0315/devops-nodejs-app:latest
          {% else %}
          {{ IMAGE }}
          {% endif %}

    - name: Remove existing container
      docker_container:
        name: "{{ CONTAINER_NAME }}"
        state: absent
        force_kill: yes
        stop_timeout: 30

    - name: Deploy application container
      docker_container:
        name: "{{ CONTAINER_NAME }}"
        image: "{{ IMAGE }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "80:{{ APP_PORT }}"
        env:
          NODE_ENV: "production"
        log_driver: json-file
        log_options:
          max-size: "10m"
          max-file: "3"
        volumes:
          - "/etc/timezone:/etc/timezone:ro"
          - "/etc/localtime:/etc/localtime:ro"
