---
- name: Deploy Docker container on EC2
  hosts: ec2
  become: yes

  vars:
    IMAGE: "rahul0315/devops-nodejs-app:{{ GIT_COMMIT | default('latest') }}"
    CONTAINER_NAME: devops-app
    APP_PORT: 3000

  tasks:
    # COMPLETE CLEANUP OF EXISTING DOCKER INSTALLATION
    - name: Remove all Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: absent
        purge: yes
      ignore_errors: yes

    - name: Remove all Docker repository configurations
      file:
        path: "/etc/apt/sources.list.d/{{ item }}"
        state: absent
      loop:
        - docker.list
        - docker.list.save
        - docker.list.dpkg-dist
        - docker.list.dpkg-old
      ignore_errors: yes

    - name: Remove Docker GPG key
      file:
        path: "/etc/apt/keyrings/docker.gpg"
        state: absent
      ignore_errors: yes

    # FRESH INSTALLATION BEGINS HERE
    - name: Update apt package index
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present

    - name: Create directory for Docker GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker's official GPG key (alternative method)
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Set up Docker repository (direct file method)
      copy:
        dest: /etc/apt/sources.list.d/docker.list
        content: |
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        mode: '0644'

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: yes

    - name: Ensure Docker is running
      service:
        name: docker
        state: started
        enabled: yes

    # CONTAINER DEPLOYMENT
    - name: Try pulling tagged Docker image (with fallback)
      block:
        - name: Pull Docker image with tag
          docker_image:
            name: "{{ IMAGE }}"
            source: pull
      rescue:
        - name: Log warning and pull latest instead
          debug:
            msg: "Tag {{ IMAGE }} not found. Pulling latest..."
        - name: Pull latest tag as fallback
          docker_image:
            name: "rahul0315/devops-nodejs-app:latest"
            source: pull
        - set_fact:
            IMAGE: "rahul0315/devops-nodejs-app:latest"

    - name: Stop and remove old container if exists
      docker_container:
        name: "{{ CONTAINER_NAME }}"
        state: absent
        force_kill: yes

    - name: Run new container with pulled image
      docker_container:
        name: "{{ CONTAINER_NAME }}"
        image: "{{ IMAGE }}"
        state: started
        restart_policy: always
        ports:
          - "80:{{ APP_PORT }}"
        env:
          NODE_ENV: production
